#include <stdio.h>
#include <limits.h>

#define V 10  // Maximum number of vertices

// Function to find the vertex with the minimum distance value
int minDistance(int dist[], int visited[], int n) {
    int min = INT_MAX, min_index;
    for (int v = 0; v < n; v++)
        if (visited[v] == 0 && dist[v] <= min)
            min = dist[v], min_index = v;
    return min_index;
}

// Function to print the shortest distances from the source
void printSolution(int dist[], int n) {
    printf("Vertex \t\t Distance from Source\n");
    for (int i = 0; i < n; i++)
        printf("%d \t\t %d\n", i, dist[i]);
}

// Function implementing Dijkstra's algorithm
void dijkstra(int graph[V][V], int n, int src) {
    int dist[V];     // dist[i] will hold the shortest distance from src to i
    int visited[V];  // visited[i] = 1 if vertex i is processed

    // Initialize distances as infinite and visited[] as false
    for (int i = 0; i < n; i++) {
        dist[i] = INT_MAX;
        visited[i] = 0;
    }

    // Distance of source vertex from itself is always 0
    dist[src] = 0;

    // Find shortest path for all vertices
    for (int count = 0; count < n - 1; count++) {
        // Pick the minimum distance vertex from the set of unvisited vertices
        int u = minDistance(dist, visited, n);
        visited[u] = 1;

        // Update dist[v] only if not visited, edge exists, and total weight < current distance
        for (int v = 0; v < n; v++)
            if (!visited[v] && graph[u][v] && dist[u] != INT_MAX
                && dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
    }

    // Print the constructed distance array
    printSolution(dist, n);
}

// Main function
int main() {
    int n;  // Number of vertices
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &n);

    int graph[V][V];
    printf("Enter the adjacency matrix (enter 0 if no edge between nodes):\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &graph[i][j]);

    int src;
    printf("Enter the source vertex (0 to %d): ", n - 1);
    scanf("%d", &src);

    dijkstra(graph, n, src);

    return 0;
}
